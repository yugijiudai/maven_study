<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>zttc.itat.maven</groupId>
    <artifactId>maven-study</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <modules>
        <!--聚合是模块的位置-->
        <module>maven-ch01</module>
        <module>maven-ch02</module>
        <module>maven-ch03</module>
    </modules>
    <packaging>pom</packaging>


    <properties>
        <!--<hibernate.version>5.2.2.Final</hibernate.version>-->
        <hibernate.version>4.3.10.Final</hibernate.version>
        <mysql.version>5.1.30</mysql.version>
        <junit.version>4.12</junit.version>
        <easymock.version>3.4</easymock.version>
        <jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
        <jdbc.url>jdbc:mysql://localhost/hibernate4?characterEncoding=utf8</jdbc.url>
        <jdbc.user>root</jdbc.user>
        <jdbc.pass>111111</jdbc.pass>
        <javax_servlet_api_version>3.0.1</javax_servlet_api_version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <installLocation>F:\\project</installLocation>
        <project.folder>maven_study</project.folder>
        <skipTest>true</skipTest>
    </properties>

    <!-- mvn clean install -Pdev ,如果下面plugin配置了跳过测试,即使运行这个命令,不管test.skip是否true都会跳过测试-->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <env>dev</env>
                <test.skip>${skipTest}</test.skip>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
    </profiles>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>maven-ch01</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax_servlet_api_version}</version>
                <scope>provided</scope>
            </dependency>
            <!--hibernate 4-->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-core</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-entitymanager</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-ehcache</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.easymock</groupId>
                <artifactId>easymock</artifactId>
                <version>${easymock.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!--发布到snapshots-->
    <distributionManagement>
        <repository>
            <id>maven-release</id>
            <name>maven release resp</name>
            <url>http://localhost:8081/nexus/content/repositories/cms-release/</url>
        </repository>
        <snapshotRepository>
            <!--nexus中该仓库配置的Repository Policy要设置成snapshot才行-->
            <id>maven-snapshots</id>
            <name>maven snapshots resp</name>
            <url>http://localhost:8081/nexus/content/repositories/cms-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!--finalName是打包后的名字-->
    <build>
        <pluginManagement>
            <plugins>
                <!--maven test中文乱码解决start-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.14</version>
                    <configuration>
                        <forkMode>once</forkMode>
                        <argLine>-Dfile.encoding=UTF-8</argLine>
                        <!--设置包含的设置类,只有Hello开头的才会被测试-->
                        <!--<includes>-->
                        <!--<include>**/Hello*</include>-->
                        <!--</includes>-->
                        <!--设置不进行测试的类-->
                        <!--<excludes>-->
                        <!--<exclude>Test*</exclude>-->
                        <!--</excludes>-->
                        <!--<redirectTestOutputToFile>true</redirectTestOutputToFile>-->
                        <!--<testFailureIgnore>true</testFailureIgnore>-->
                        <!--跳过测试阶段,一般不推荐跳过-->
                        <skip>${skipTest}</skip>
                    </configuration>
                </plugin>
                <!--maven test中文乱码解决end-->

                <!--编译版本start-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.3</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <encoding>utf8</encoding>
                        <!--此处设置了skip等于设置了把所有的测试编译都跳过,如果测试类写得有问题,也不会报错,所以一般不使用-->
                        <!--<skip>true</skip>-->
                    </configuration>
                </plugin>
                <!--编译版本end-->

                <!--把用到的jar打包成rar start-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-rar-plugin</artifactId>
                    <version>2.3</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>rar</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                    </executions>
                    <configuration>
                        <!--是否包括自己-->
                        <includeJar>false</includeJar>
                    </configuration>
                </plugin>
                <!--把用到的jar打包成rar end-->

                <!--sql插件start-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>sql-maven-plugin</artifactId>
                    <version>1.5</version>
                    <!--使用插件依然可以指定相应的依赖-->
                    <dependencies>
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>${mysql.version}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <driver>${jdbc.driver}</driver>
                        <url>${jdbc.url}</url>
                        <username>${jdbc.user}</username>
                        <password>${jdbc.pass}</password>
                    </configuration>
                    <executions>
                        <execution>
                            <id>create-db</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <sqlCommand>create database IF NOT EXISTS itat_maven_test</sqlCommand>
                            </configuration>
                        </execution>
                        <execution>
                            <id>init-table</id>
                            <phase>test-compile</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <srcFiles>
                                    <srcFile>src/main/resources/init.sql</srcFile>
                                </srcFiles>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!--sql插件end-->

                <!--打包源码start-->
                <plugin>
                    <!--相当于执行source:jar,source:test-jar-->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.2.1</version>
                    <executions>
                        <execution>
                            <!--phase指的是生命周期,在compile之后执行这个插件,把jar和test-jar打包进来-->
                            <phase>generate-sources</phase>
                            <!--<phase>compile</phase>-->
                            <goals>
                                <!--<goal>jar</goal>-->
                                <goal>jar-no-fork</goal>
                                <!--<goal>test-jar</goal>-->
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--打包源码end-->

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                        <formats>
                            <format>html</format>
                            <format>xml</format>
                        </formats>
                    </configuration>
                    <executions>
                        <execution>
                            <id>cobertura-report</id>
                            <goals>
                                <goal>cobertura</goal>
                            </goals>
                            <phase>test</phase>
                        </execution>
                    </executions>
                </plugin>

                <!--把war或者jar另外打包到指定的地方start-->
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <configuration>
                        <archiveClasses>true</archiveClasses>
                        <outputDirectory>${installLocation}/${project.folder}</outputDirectory>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <configuration>
                        <outputDirectory>${installLocation}/${project.folder}</outputDirectory>
                    </configuration>
                </plugin>
                <!--把war或者jar另外打包到指定的地方end-->

            </plugins>
        </pluginManagement>
        <finalName>maven_2017</finalName>
    </build>
</project>
